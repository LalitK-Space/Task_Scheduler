
Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001070  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08001218  08001218  00011218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012f0  080012f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080012f0  080012f0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012f0  080012f0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012f0  080012f0  000112f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012f4  080012f4  000112f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080012f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000084  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000cd4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000449  00000000  00000000  00020d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  000211b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000190  00000000  00000000  00021380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c58  00000000  00000000  00021510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001620  00000000  00000000  00024168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097f3  00000000  00000000  00025788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002ef7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ca8  00000000  00000000  0002efcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001200 	.word	0x08001200

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001200 	.word	0x08001200

080001e8 <main>:
/* -- TCB for Tasks (MAX_TASKS) -- */
TCB_t user_tasks[MAX_TASKS];	// 1 TCB per task


int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	/* -- Enable Processor's Faults -- */
	enable_processor_faults();
 80001ec:	f000 f8ea 	bl	80003c4 <enable_processor_faults>


	/* -- Initialize the scheduler stack i.e. MSP(Main Stack Pointer) -- */
	init_scheduler_stack(SCHEDULER_STACK_START);
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <main+0x24>)
 80001f2:	f000 f853 	bl	800029c <init_scheduler_stack>

	// Initialization of User Tasks (Done in the beginning of init_task_stack)
	/* -- Task Stack initialization to store dummy stack frames -- */
	init_task_stack();
 80001f6:	f000 f857 	bl	80002a8 <init_task_stack>

	/* -- To generate sysTick timer exception -- */
	init_systick_timer(TICK_HZ);
 80001fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001fe:	f000 f817 	bl	8000230 <init_systick_timer>

	/* -------------------- Up to here, code is using MSP as the stack pointer -------------------- */

	/* -- To switch SP to PSP -- */
	switch_sp_to_psp();
 8000202:	f000 f96b 	bl	80004dc <switch_sp_to_psp>

	/* -- launch First task (before calling task handler, change Stack Pointer) -- */
	/* -- SP needs to change because task handler runs with PSP as Stack Pointer (switch_sp_to_psp) --  */
	task1_handler();
 8000206:	f000 f806 	bl	8000216 <task1_handler>



	/* -- Control never reach here as tasks are never returning -- */
    /* Loop forever */
	for(;;);
 800020a:	e7fe      	b.n	800020a <main+0x22>
 800020c:	2001ec00 	.word	0x2001ec00

08000210 <idle_task_handler>:
/* -- Task Implementation -- */
/* -- Tasks are never returning [ while(1) ] -- */

// IDLE TASK
void idle_task_handler(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	while(1);
 8000214:	e7fe      	b.n	8000214 <idle_task_handler+0x4>

08000216 <task1_handler>:
	// Does nothing
}

void task1_handler (void)
{
 8000216:	b480      	push	{r7}
 8000218:	af00      	add	r7, sp, #0
	while(1)
 800021a:	e7fe      	b.n	800021a <task1_handler+0x4>

0800021c <task2_handler>:
		// Task 1 (use task_Delay(x) to block the task for x number of ticks (x milliseconds))
	}
}

void task2_handler (void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1)
 8000220:	e7fe      	b.n	8000220 <task2_handler+0x4>

08000222 <task3_handler>:
		// Task 2 (use task_Delay(x) to block the task for x number of ticks (x milliseconds))
	}
}

void task3_handler (void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1)
 8000226:	e7fe      	b.n	8000226 <task3_handler+0x4>

08000228 <task4_handler>:
		// Task 3 (use task_Delay(x) to block the task for x number of ticks (x milliseconds))
	}
}

void task4_handler (void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1)
 800022c:	e7fe      	b.n	800022c <task4_handler+0x4>
	...

08000230 <init_systick_timer>:
 * Parameter	:	uint32_t ticks : Desired exception frequency
 * Return Type	:	none (void)
 * Note			:	-
 * ------------------------------------------------------------------------------------------------------ */
void init_systick_timer (uint32_t ticks)
{
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	/* -- SysTick Reload Value Register (SRVR) -- */
	uint32_t *pSRVR = (uint32_t*) 0xE000E014;
 8000238:	4b15      	ldr	r3, [pc, #84]	; (8000290 <init_systick_timer+0x60>)
 800023a:	617b      	str	r3, [r7, #20]


	/* -- SysTick Control and Status Register (SCSR) -- */
	uint32_t *pSCSR = (uint32_t*) 0xE000E010;;
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <init_systick_timer+0x64>)
 800023e:	613b      	str	r3, [r7, #16]


	/* -- Calculate the count value (Reload value - 1) -- */
	uint32_t count_value = ( SYSTICK_TIMER_CLOCK / ticks ) - 1;   // SYSTICK_TIMER_CLOCK: input clock to sysTick timer
 8000240:	4a15      	ldr	r2, [pc, #84]	; (8000298 <init_systick_timer+0x68>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	fbb2 f3f3 	udiv	r3, r2, r3
 8000248:	3b01      	subs	r3, #1
 800024a:	60fb      	str	r3, [r7, #12]
																  // ticks			  	: desired exception frequency

	/* -- Load the value into SVR -- */
	*pSRVR &= ~(0x00FFFFFFFF);				// First clear the value of SVR (24 bits in use, rest reserved)
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
	*pSRVR |= count_value;					// Load value in to SVR
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	431a      	orrs	r2, r3
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	601a      	str	r2, [r3, #0]
	/* -- Some settings in SysTick Control and Status Register (SCSR) -- */

	// Three Bits to configure
	// BIT[2]: CLKSOURCE, BIT[1]: TICKINIT (Enable exception), BIT[0]: ENABLE (Enable the counter)

	*pSCSR |= (1 << 1); 		// BIT[1]: Enable sysTick exception request
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f043 0202 	orr.w	r2, r3, #2
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2);			// BIT[2]: Clock Source as internal clock (Processor Clock Source)
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f043 0204 	orr.w	r2, r3, #4
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	601a      	str	r2, [r3, #0]

	/* -- Enable the sysTick -- */
	*pSCSR |= (1 << 0);			// BIT[0]: Enable the counter (Enable sysTick timer)
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f043 0201 	orr.w	r2, r3, #1
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	601a      	str	r2, [r3, #0]

}
 8000282:	bf00      	nop
 8000284:	371c      	adds	r7, #28
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	e000e014 	.word	0xe000e014
 8000294:	e000e010 	.word	0xe000e010
 8000298:	00f42400 	.word	0x00f42400

0800029c <init_scheduler_stack>:
 * Return Type	:	none (void)
 * Note			:	making it as an NAKED FUNCTION to prevent prologue sequences
 * 					AAPCS: ARM Architecture Procedure Call Standard
 * ------------------------------------------------------------------------------------------------------ */
__attribute__ ((naked))void init_scheduler_stack(uint32_t scheduler_topOfStack)
{
 800029c:	4603      	mov	r3, r0
	/* -- Value of MSP should be modified -- */

	// Instruction used is MSR, and 'scheduler_topOfStack' is argument 1 so it is stored in R0 (AAPCS)
	// 	__asm volatile ("MSR MSP, R0");
	// OR using in-line assemble syntax including C variable
	__asm volatile ("MSR MSP, %0" : : "r" (scheduler_topOfStack) : );
 800029e:	f383 8808 	msr	MSP, r3
	 * we have to write our own return statements to go back to the main() function
	 * (this function is called by main).
	 */

	// To go back to main() function
	__asm volatile ("BX LR");
 80002a2:	4770      	bx	lr
	/* -- WHY BX LR? BX (Branch indirect) copies the value of LR to PC.
	 * [BX LR means return from function call] -- */

}
 80002a4:	bf00      	nop
	...

080002a8 <init_task_stack>:
						EXC_RETURN (0xFFFFFFFD) means a return to thread mode. Exception return uses non floating state from the PSP and execution uses PSP after return
					PC: address of task handler
					xPSR: T bit must be set to denote thumb state (T bit should never be 0). 0x01000000 for every task
 * ------------------------------------------------------------------------------------------------------ */
void init_task_stack(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
	// Initially, Keep all the tasks in READY State
	user_tasks[0].current_state = TASK_READY_STATE;
 80002ae:	4b3a      	ldr	r3, [pc, #232]	; (8000398 <init_task_stack+0xf0>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80002b4:	4b38      	ldr	r3, [pc, #224]	; (8000398 <init_task_stack+0xf0>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 80002ba:	4b37      	ldr	r3, [pc, #220]	; (8000398 <init_task_stack+0xf0>)
 80002bc:	2200      	movs	r2, #0
 80002be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 80002c2:	4b35      	ldr	r3, [pc, #212]	; (8000398 <init_task_stack+0xf0>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 80002ca:	4b33      	ldr	r3, [pc, #204]	; (8000398 <init_task_stack+0xf0>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// Now, initialize the PSP Values
	user_tasks[0].psp_value = IDLE_TASK_STACK_START;
 80002d2:	4b31      	ldr	r3, [pc, #196]	; (8000398 <init_task_stack+0xf0>)
 80002d4:	4a31      	ldr	r2, [pc, #196]	; (800039c <init_task_stack+0xf4>)
 80002d6:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = TASK1_STACK_START;
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <init_task_stack+0xf0>)
 80002da:	4a31      	ldr	r2, [pc, #196]	; (80003a0 <init_task_stack+0xf8>)
 80002dc:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = TASK2_STACK_START;
 80002de:	4b2e      	ldr	r3, [pc, #184]	; (8000398 <init_task_stack+0xf0>)
 80002e0:	4a30      	ldr	r2, [pc, #192]	; (80003a4 <init_task_stack+0xfc>)
 80002e2:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = TASK3_STACK_START;
 80002e4:	4b2c      	ldr	r3, [pc, #176]	; (8000398 <init_task_stack+0xf0>)
 80002e6:	4a30      	ldr	r2, [pc, #192]	; (80003a8 <init_task_stack+0x100>)
 80002e8:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = TASK4_STACK_START;
 80002ea:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <init_task_stack+0xf0>)
 80002ec:	4a2f      	ldr	r2, [pc, #188]	; (80003ac <init_task_stack+0x104>)
 80002ee:	641a      	str	r2, [r3, #64]	; 0x40

	// Initialize the task function pointer with task handler address
	user_tasks[0].task_handler = idle_task_handler;
 80002f0:	4b29      	ldr	r3, [pc, #164]	; (8000398 <init_task_stack+0xf0>)
 80002f2:	4a2f      	ldr	r2, [pc, #188]	; (80003b0 <init_task_stack+0x108>)
 80002f4:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 80002f6:	4b28      	ldr	r3, [pc, #160]	; (8000398 <init_task_stack+0xf0>)
 80002f8:	4a2e      	ldr	r2, [pc, #184]	; (80003b4 <init_task_stack+0x10c>)
 80002fa:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 80002fc:	4b26      	ldr	r3, [pc, #152]	; (8000398 <init_task_stack+0xf0>)
 80002fe:	4a2e      	ldr	r2, [pc, #184]	; (80003b8 <init_task_stack+0x110>)
 8000300:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <init_task_stack+0xf0>)
 8000304:	4a2d      	ldr	r2, [pc, #180]	; (80003bc <init_task_stack+0x114>)
 8000306:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <init_task_stack+0xf0>)
 800030a:	4a2d      	ldr	r2, [pc, #180]	; (80003c0 <init_task_stack+0x118>)
 800030c:	64da      	str	r2, [r3, #76]	; 0x4c
	/* -- To store data into stack memory and access it using this pointer -- */
	uint32_t *pPSP;

	/* -- Initialize User tasks -- */
	/* -- Values MUST be stored in this order: SF1[xPSR, PC, LR R12, R3, R2, R1, R0] SF2[R11,..., R4] -- */
	for (int i = 0; i < MAX_TASKS; i++)
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	e037      	b.n	8000384 <init_task_stack+0xdc>
	{
		// Initialize the pointer with PSP of tasks
		pPSP = (uint32_t *) user_tasks[i].psp_value;
 8000314:	4a20      	ldr	r2, [pc, #128]	; (8000398 <init_task_stack+0xf0>)
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	011b      	lsls	r3, r3, #4
 800031a:	4413      	add	r3, r2
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	60fb      	str	r3, [r7, #12]

		// As the Stack is FULL DESCENDING, so, first decrement then value
		pPSP--;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3b04      	subs	r3, #4
 8000324:	60fb      	str	r3, [r7, #12]
		// Now, store the first value: dummy xPSR
		*pPSP = DUMMY_XPSR;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800032c:	601a      	str	r2, [r3, #0]

		// For second value, decrement first and then value
		pPSP--;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3b04      	subs	r3, #4
 8000332:	60fb      	str	r3, [r7, #12]
		// Now, store the second value: PC (return address) [address of the task handler]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000334:	4a18      	ldr	r2, [pc, #96]	; (8000398 <init_task_stack+0xf0>)
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	011b      	lsls	r3, r3, #4
 800033a:	4413      	add	r3, r2
 800033c:	330c      	adds	r3, #12
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	461a      	mov	r2, r3
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	601a      	str	r2, [r3, #0]

		// For third value, decrement first and then value
		pPSP--;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3b04      	subs	r3, #4
 800034a:	60fb      	str	r3, [r7, #12]
		// Now, store the third value: LR (EXC_RETURN: 0xFFFFFFFD, execution uses PSP after return)
		*pPSP = 0xFFFFFFFD;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f06f 0202 	mvn.w	r2, #2
 8000352:	601a      	str	r2, [r3, #0]

		// Now, remaining fields are for general purpose registers, their value is ZERO
		// using loop to store value of 13 general purpose registers [R0 - R12]
		for (int j = 0; j < 13; j++)
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	e008      	b.n	800036c <init_task_stack+0xc4>
		{
			// Same as before, decrement the PSP and then store value
			pPSP--;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3b04      	subs	r3, #4
 800035e:	60fb      	str	r3, [r7, #12]
			// Now, value i.e. 0
			*pPSP = 0;
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2b0c      	cmp	r3, #12
 8000370:	ddf3      	ble.n	800035a <init_task_stack+0xb2>
		}

		/* -- Preserve the PSP value (important) -- */
		user_tasks[i].psp_value = (uint32_t) pPSP;
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	4908      	ldr	r1, [pc, #32]	; (8000398 <init_task_stack+0xf0>)
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	011b      	lsls	r3, r3, #4
 800037a:	440b      	add	r3, r1
 800037c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++)
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	3301      	adds	r3, #1
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	2b04      	cmp	r3, #4
 8000388:	ddc4      	ble.n	8000314 <init_task_stack+0x6c>

	}

}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	20000088 	.word	0x20000088
 800039c:	2001f000 	.word	0x2001f000
 80003a0:	20020000 	.word	0x20020000
 80003a4:	2001fc00 	.word	0x2001fc00
 80003a8:	2001f800 	.word	0x2001f800
 80003ac:	2001f400 	.word	0x2001f400
 80003b0:	08000211 	.word	0x08000211
 80003b4:	08000217 	.word	0x08000217
 80003b8:	0800021d 	.word	0x0800021d
 80003bc:	08000223 	.word	0x08000223
 80003c0:	08000229 	.word	0x08000229

080003c4 <enable_processor_faults>:
 * Note			:	As code deals with stack memory, there may be a chance of illegal memory manipulation.
 * 					Also, if there is any fault when changing from thread mode to handler mode or vice versa,
 * 					it can be tracked by analyzing the fault.
 * ------------------------------------------------------------------------------------------------------ */
void enable_processor_faults(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
	/* -- System handler control and state register (SHCSR) -- */
	uint32_t *pSHCSR = (uint32_t *) 0xE000ED24;
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <enable_processor_faults+0x3c>)
 80003cc:	607b      	str	r3, [r7, #4]

	// Enable all configurable exceptions
	*pSHCSR |= (1 << 16);		// Memory manage fault
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17);		// Bus fault
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18);		// Usage fault
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	601a      	str	r2, [r3, #0]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000ed24 	.word	0xe000ed24

08000404 <get_psp_value>:
 * Return Type	:	none (void)
 * Note			:
 *
 * ------------------------------------------------------------------------------------------------------ */
uint32_t get_psp_value(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	// return the PSP value of the current running task on the CPU
	return user_tasks[current_task].psp_value;
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <get_psp_value+0x1c>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4a05      	ldr	r2, [pc, #20]	; (8000424 <get_psp_value+0x20>)
 800040e:	011b      	lsls	r3, r3, #4
 8000410:	4413      	add	r3, r2
 8000412:	681b      	ldr	r3, [r3, #0]
}
 8000414:	4618      	mov	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	20000000 	.word	0x20000000
 8000424:	20000088 	.word	0x20000088

08000428 <save_psp_value>:
 * Return Type	:	none (void)
 * Note			:
 *
 * ------------------------------------------------------------------------------------------------------ */
void save_psp_value(uint32_t current_psp_value)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <save_psp_value+0x24>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4a06      	ldr	r2, [pc, #24]	; (8000450 <save_psp_value+0x28>)
 8000436:	011b      	lsls	r3, r3, #4
 8000438:	4413      	add	r3, r2
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	601a      	str	r2, [r3, #0]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	20000000 	.word	0x20000000
 8000450:	20000088 	.word	0x20000088

08000454 <update_next_task>:
 * Return Type	:	none (void)
 * Note			:	Algorithm opted: Round Robin.
 * 					If all the tasks are in the blocked state, run the idle task
 * ------------------------------------------------------------------------------------------------------ */
void update_next_task(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 800045a:	23ff      	movs	r3, #255	; 0xff
 800045c:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < MAX_TASKS; i++)		// Go through all the task
 800045e:	2300      	movs	r3, #0
 8000460:	603b      	str	r3, [r7, #0]
 8000462:	e024      	b.n	80004ae <update_next_task+0x5a>
	{
		// Increment current_task
		current_task++;
 8000464:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <update_next_task+0x7c>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	3301      	adds	r3, #1
 800046a:	b2da      	uxtb	r2, r3
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <update_next_task+0x7c>)
 800046e:	701a      	strb	r2, [r3, #0]

		// This is Round Robin Fashion, [0 becomes 1, 1 becomes 2, 2 becomes 3 and 3 becomes 4 and 4 becomes 0]
		current_task %= MAX_TASKS;
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <update_next_task+0x7c>)
 8000472:	781a      	ldrb	r2, [r3, #0]
 8000474:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <update_next_task+0x80>)
 8000476:	fba3 1302 	umull	r1, r3, r3, r2
 800047a:	0899      	lsrs	r1, r3, #2
 800047c:	460b      	mov	r3, r1
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	440b      	add	r3, r1
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <update_next_task+0x7c>)
 8000488:	701a      	strb	r2, [r3, #0]

		// Get current state of the task, if ready, then only schedulable
		state = user_tasks[current_task].current_state;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <update_next_task+0x7c>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <update_next_task+0x84>)
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	4413      	add	r3, r2
 8000494:	3308      	adds	r3, #8
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	607b      	str	r3, [r7, #4]

		// Also, ignore if IDLE TASK (current_task = 0) because it is always READY
		if ((state == TASK_READY_STATE) && (current_task != 0))
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d103      	bne.n	80004a8 <update_next_task+0x54>
 80004a0:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <update_next_task+0x7c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d106      	bne.n	80004b6 <update_next_task+0x62>
	for (int i = 0; i < MAX_TASKS; i++)		// Go through all the task
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	3301      	adds	r3, #1
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	ddd7      	ble.n	8000464 <update_next_task+0x10>
 80004b4:	e000      	b.n	80004b8 <update_next_task+0x64>
		{
			break;
 80004b6:	bf00      	nop
		}

	}

	// if all the tasks are in blocked state, run TASK0
	if (state != TASK_READY_STATE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d002      	beq.n	80004c4 <update_next_task+0x70>
	{
		current_task = 0;
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <update_next_task+0x7c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	701a      	strb	r2, [r3, #0]
	}

}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	20000000 	.word	0x20000000
 80004d4:	cccccccd 	.word	0xcccccccd
 80004d8:	20000088 	.word	0x20000088

080004dc <switch_sp_to_psp>:

	/* -- (Step 1) Initialize the PSP with Task1 Stack start address (get_psp_value)-- */
	// WHY Task1? because it is the first task to launch

	// Preserve LR (which connects back to main() : Refer to NOTE )
	__asm volatile ("PUSH {LR}");
 80004dc:	b500      	push	{lr}

	// Step 1a: Get value of PSP of the current task
	__asm volatile ("BL get_psp_value"); // Code will branch to get_psp_value function
 80004de:	f7ff ff91 	bl	8000404 <get_psp_value>

	/*-- when step 1a is executed, psp_of_tasks value is stored in R0 (AAPCS) -- */
	/*-- initial Stack address of current task is stored in R0 -- */

	// Step 1b: Initialize PSP
	__asm volatile ("MSR PSP, R0");
 80004e2:	f380 8809 	msr	PSP, r0

	// Retrieve LR value : Refer to NOTE
	__asm volatile ("POP {LR}");
 80004e6:	f85d eb04 	ldr.w	lr, [sp], #4

	/* -- (Step 2) Change SP to PSP using CONTROL Register -- */

	// In CONTROL Register, make second bit as 1 to make PSP as current stack pointer
	// (Step 2a) Save 0x02 as an immediate value (0x02 to set second bit)
	__asm volatile ("MOV R0, #0x02");
 80004ea:	f04f 0002 	mov.w	r0, #2

	// (Step 2b) Push the value in CONTROL Register, this will set the second bit as 1
	__asm volatile ("MSR CONTROL, R0");
 80004ee:	f380 8814 	msr	CONTROL, r0

	// No epilogue sequence, So manually go back to main()
	__asm volatile("BX LR");		//BX LR means return from function call
 80004f2:	4770      	bx	lr

}
 80004f4:	bf00      	nop

080004f6 <PendSV_Handler>:
__attribute__ ((naked)) void PendSV_Handler(void)
{
	/* -- Step 1: Save the context of current task -- */

		// To do so: Get current running task's PSP value
		__asm volatile("MRS R0, PSP");
 80004f6:	f3ef 8009 	mrs	r0, PSP

		// Using that PSP value store SF2 (R4-R11) in task's private stack [SF1 is automatically stored (AAPCS)]
		// Cannot use PUSH instruction as it will corrupt the MSP stack, to simulate PUSH we are using
		// STMDB instruction (Store Multiple Registers, Decrement  before) [Decrement first then store]
		__asm volatile ("STMDB R0!, {R4-R11}");	// ! is to update R0 after every store operation
 80004fa:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		/* -- Before using BL instruction, save context of LR (So not to corrupt it because of next return address) -- */
		__asm volatile ("PUSH {LR}"); // LR is going to change because of every BL instruction, we have to save this one
 80004fe:	b500      	push	{lr}
									  // In order to have proper EXC_RETURN at the time of exit

		// Save the current value of PSP (save R0, because it now has the updated stack address of task's private stack)
		__asm volatile ("BL save_psp_value");  // When called, R0 will be copied as First Argument(current_psp_value = R0) [AAPCS]
 8000500:	f7ff ff92 	bl	8000428 <save_psp_value>
		/* -- Current task's state is saved, Now step 2 -- */

		/* -- Step 2: Retrieve the context of next task -- */

		// To do so: Decide next task to run
		__asm volatile("BL update_next_task");
 8000504:	f7ff ffa6 	bl	8000454 <update_next_task>

		// Get next task's PSP value (its past PSP value)
		__asm volatile ("BL get_psp_value"); // Since, current task is already updated (previous step),
 8000508:	f7ff ff7c 	bl	8000404 <get_psp_value>
											 // next task's PSP will be retrieved (Return value is in R0 [AAPCS])

		// Using that PSP value retrieve SF2 (R4-R11) [SF1 will automatically be retrieved [AAPCS]]
		// Instruction: Load from stack to register (From memory to register)
		// Instruction used is LDMIA (Load Multiple Register and Increment After)
		__asm volatile ("LDMIA R0!, {R4-R11}"); // ! to update R0 after every load operation, save R0 in PSP (next step)
 800050c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		// Update PSP and exit
		__asm volatile ("MSR PSP, R0");
 8000510:	f380 8809 	msr	PSP, r0
		// Exit, during exception return SF1 will be automatically fetched (Exception Return Sequence)
		// PSP is modified in last step because, Reference for SF1 is the stack address of next updated task
		// PSP is now pointing to the stack area of the next updated task, So execution will go to next task

		// POP LR
		__asm volatile ("POP {LR}"); // with proper EXC_RETURN value
 8000514:	f85d eb04 	ldr.w	lr, [sp], #4

		/* -- Since, naked function, no epilogue, so manually return (exception exit) -- */
		// To exit from an exception: Copy value of EXC_RETURN into PC
		__asm volatile ("BX LR");
 8000518:	4770      	bx	lr

}
 800051a:	bf00      	nop

0800051c <update_global_tick_count>:
 * Note			:	The scheduler must compare the task's delay tick count with a global one.
 * 					The scheduler should maintain a global tick count and update it for every sysTick exception.
 *
 * ------------------------------------------------------------------------------------------------------ */
void update_global_tick_count(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
	global_tick_count++;
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <update_global_tick_count+0x18>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	4a03      	ldr	r2, [pc, #12]	; (8000534 <update_global_tick_count+0x18>)
 8000528:	6013      	str	r3, [r2, #0]
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	20000084 	.word	0x20000084

08000538 <unblock_task>:
 * Return Type	:	none (void)
 * Note			:
 *
 * ------------------------------------------------------------------------------------------------------ */
void unblock_task(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
	/* -- Check: if there is any task that can be unblocked
	 * By comparing the block tick count with the global tick count value -- */

	// Loop is starting from 1 because Task 0 is Idle Task and it is always in READY STATE
	for (int i = 1; i < MAX_TASKS; i++)
 800053e:	2301      	movs	r3, #1
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	e01b      	b.n	800057c <unblock_task+0x44>
	{
		if (user_tasks[i].current_state != TASK_READY_STATE) 	// ONLY to check if task is not in READY STATE
 8000544:	4a12      	ldr	r2, [pc, #72]	; (8000590 <unblock_task+0x58>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	4413      	add	r3, r2
 800054c:	3308      	adds	r3, #8
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d010      	beq.n	8000576 <unblock_task+0x3e>
		{
			if (user_tasks[i].block_count == global_tick_count)
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <unblock_task+0x58>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	3304      	adds	r3, #4
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <unblock_task+0x5c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	429a      	cmp	r2, r3
 8000566:	d106      	bne.n	8000576 <unblock_task+0x3e>
			{
				// Means delay (blocking period) is elapsed, Now change the state
				user_tasks[i].current_state = TASK_READY_STATE;
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <unblock_task+0x58>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	4413      	add	r3, r2
 8000570:	3308      	adds	r3, #8
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < MAX_TASKS; i++)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3301      	adds	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b04      	cmp	r3, #4
 8000580:	dde0      	ble.n	8000544 <unblock_task+0xc>

			}
		}
	}
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	20000088 	.word	0x20000088
 8000594:	20000084 	.word	0x20000084

08000598 <SysTick_Handler>:
 * 					2. unblock task
 * 					3. Pend the PendSV
 * 					4. Exit
 * ------------------------------------------------------------------------------------------------------ */
void SysTick_Handler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	/* -- Update Global Tick Count -- */
	update_global_tick_count();
 800059e:	f7ff ffbd 	bl	800051c <update_global_tick_count>

	/* -- Unblock a task (if qualify) -- */
	unblock_task();
 80005a2:	f7ff ffc9 	bl	8000538 <unblock_task>

	/* -- Pend the PendSV Exception -- */
	// ICSR = Interrupt Control and State Register (to pend the pendSV)
	uint32_t *pICSR = (uint32_t *) 0xE000ED04;
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <SysTick_Handler+0x28>)
 80005a8:	607b      	str	r3, [r7, #4]
	// Set 28th bit to pend
	*pICSR |= (1 << 28);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	601a      	str	r2, [r3, #0]

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	e000ed04 	.word	0xe000ed04

080005c4 <HardFault_Handler>:


/* -- Fault Handlers -- */
void HardFault_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	printf(" Exception : Hard Fault \n");
 80005c8:	4801      	ldr	r0, [pc, #4]	; (80005d0 <HardFault_Handler+0xc>)
 80005ca:	f000 f989 	bl	80008e0 <puts>
	while(1);
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler+0xa>
 80005d0:	08001218 	.word	0x08001218

080005d4 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	printf(" Exception : Memory Manage Fault \n");
 80005d8:	4801      	ldr	r0, [pc, #4]	; (80005e0 <MemManage_Handler+0xc>)
 80005da:	f000 f981 	bl	80008e0 <puts>
	while(1);
 80005de:	e7fe      	b.n	80005de <MemManage_Handler+0xa>
 80005e0:	08001234 	.word	0x08001234

080005e4 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	printf(" Exception : Bus Fault \n");
 80005e8:	4801      	ldr	r0, [pc, #4]	; (80005f0 <BusFault_Handler+0xc>)
 80005ea:	f000 f979 	bl	80008e0 <puts>
	while(1);
 80005ee:	e7fe      	b.n	80005ee <BusFault_Handler+0xa>
 80005f0:	08001258 	.word	0x08001258

080005f4 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	printf(" Exception : Usage Fault \n");
 80005f8:	4801      	ldr	r0, [pc, #4]	; (8000600 <UsageFault_Handler+0xc>)
 80005fa:	f000 f971 	bl	80008e0 <puts>
	while(1);
 80005fe:	e7fe      	b.n	80005fe <UsageFault_Handler+0xa>
 8000600:	08001270 	.word	0x08001270

08000604 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	e00a      	b.n	800062c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000616:	f3af 8000 	nop.w
 800061a:	4601      	mov	r1, r0
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	b2ca      	uxtb	r2, r1
 8000624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	dbf0      	blt.n	8000616 <_read+0x12>
	}

return len;
 8000634:	687b      	ldr	r3, [r7, #4]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	e009      	b.n	8000664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	60ba      	str	r2, [r7, #8]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	3301      	adds	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbf1      	blt.n	8000650 <_write+0x12>
	}
	return len;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <_close>:

int _close(int file)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
	return -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800069e:	605a      	str	r2, [r3, #4]
	return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <_isatty>:

int _isatty(int file)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	return 1;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
	return 0;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <_sbrk+0x5c>)
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <_sbrk+0x60>)
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d102      	bne.n	8000702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <_sbrk+0x64>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <_sbrk+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	429a      	cmp	r2, r3
 800070e:	d207      	bcs.n	8000720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000710:	f000 f846 	bl	80007a0 <__errno>
 8000714:	4603      	mov	r3, r0
 8000716:	220c      	movs	r2, #12
 8000718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	e009      	b.n	8000734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <_sbrk+0x64>)
 8000730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20020000 	.word	0x20020000
 8000740:	00000400 	.word	0x00000400
 8000744:	200000d8 	.word	0x200000d8
 8000748:	200000f0 	.word	0x200000f0

0800074c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000750:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <LoopForever+0x6>)
  ldr r1, =_edata
 8000756:	490d      	ldr	r1, [pc, #52]	; (800078c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000758:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <LoopForever+0xe>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <LoopForever+0x12>)
  ldr r4, =_ebss
 800076c:	4c0a      	ldr	r4, [pc, #40]	; (8000798 <LoopForever+0x16>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800077a:	f000 f817 	bl	80007ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fd33 	bl	80001e8 <main>

08000782 <LoopForever>:

LoopForever:
    b LoopForever
 8000782:	e7fe      	b.n	8000782 <LoopForever>
  ldr   r0, =_estack
 8000784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000790:	080012f8 	.word	0x080012f8
  ldr r2, =_sbss
 8000794:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000798:	200000ec 	.word	0x200000ec

0800079c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC_IRQHandler>
	...

080007a0 <__errno>:
 80007a0:	4b01      	ldr	r3, [pc, #4]	; (80007a8 <__errno+0x8>)
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000004 	.word	0x20000004

080007ac <__libc_init_array>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	4d0d      	ldr	r5, [pc, #52]	; (80007e4 <__libc_init_array+0x38>)
 80007b0:	4c0d      	ldr	r4, [pc, #52]	; (80007e8 <__libc_init_array+0x3c>)
 80007b2:	1b64      	subs	r4, r4, r5
 80007b4:	10a4      	asrs	r4, r4, #2
 80007b6:	2600      	movs	r6, #0
 80007b8:	42a6      	cmp	r6, r4
 80007ba:	d109      	bne.n	80007d0 <__libc_init_array+0x24>
 80007bc:	4d0b      	ldr	r5, [pc, #44]	; (80007ec <__libc_init_array+0x40>)
 80007be:	4c0c      	ldr	r4, [pc, #48]	; (80007f0 <__libc_init_array+0x44>)
 80007c0:	f000 fd1e 	bl	8001200 <_init>
 80007c4:	1b64      	subs	r4, r4, r5
 80007c6:	10a4      	asrs	r4, r4, #2
 80007c8:	2600      	movs	r6, #0
 80007ca:	42a6      	cmp	r6, r4
 80007cc:	d105      	bne.n	80007da <__libc_init_array+0x2e>
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d4:	4798      	blx	r3
 80007d6:	3601      	adds	r6, #1
 80007d8:	e7ee      	b.n	80007b8 <__libc_init_array+0xc>
 80007da:	f855 3b04 	ldr.w	r3, [r5], #4
 80007de:	4798      	blx	r3
 80007e0:	3601      	adds	r6, #1
 80007e2:	e7f2      	b.n	80007ca <__libc_init_array+0x1e>
 80007e4:	080012f0 	.word	0x080012f0
 80007e8:	080012f0 	.word	0x080012f0
 80007ec:	080012f0 	.word	0x080012f0
 80007f0:	080012f4 	.word	0x080012f4

080007f4 <memset>:
 80007f4:	4402      	add	r2, r0
 80007f6:	4603      	mov	r3, r0
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d100      	bne.n	80007fe <memset+0xa>
 80007fc:	4770      	bx	lr
 80007fe:	f803 1b01 	strb.w	r1, [r3], #1
 8000802:	e7f9      	b.n	80007f8 <memset+0x4>

08000804 <_puts_r>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	460e      	mov	r6, r1
 8000808:	4605      	mov	r5, r0
 800080a:	b118      	cbz	r0, 8000814 <_puts_r+0x10>
 800080c:	6983      	ldr	r3, [r0, #24]
 800080e:	b90b      	cbnz	r3, 8000814 <_puts_r+0x10>
 8000810:	f000 fa48 	bl	8000ca4 <__sinit>
 8000814:	69ab      	ldr	r3, [r5, #24]
 8000816:	68ac      	ldr	r4, [r5, #8]
 8000818:	b913      	cbnz	r3, 8000820 <_puts_r+0x1c>
 800081a:	4628      	mov	r0, r5
 800081c:	f000 fa42 	bl	8000ca4 <__sinit>
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <_puts_r+0xd0>)
 8000822:	429c      	cmp	r4, r3
 8000824:	d120      	bne.n	8000868 <_puts_r+0x64>
 8000826:	686c      	ldr	r4, [r5, #4]
 8000828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800082a:	07db      	lsls	r3, r3, #31
 800082c:	d405      	bmi.n	800083a <_puts_r+0x36>
 800082e:	89a3      	ldrh	r3, [r4, #12]
 8000830:	0598      	lsls	r0, r3, #22
 8000832:	d402      	bmi.n	800083a <_puts_r+0x36>
 8000834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000836:	f000 fad3 	bl	8000de0 <__retarget_lock_acquire_recursive>
 800083a:	89a3      	ldrh	r3, [r4, #12]
 800083c:	0719      	lsls	r1, r3, #28
 800083e:	d51d      	bpl.n	800087c <_puts_r+0x78>
 8000840:	6923      	ldr	r3, [r4, #16]
 8000842:	b1db      	cbz	r3, 800087c <_puts_r+0x78>
 8000844:	3e01      	subs	r6, #1
 8000846:	68a3      	ldr	r3, [r4, #8]
 8000848:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800084c:	3b01      	subs	r3, #1
 800084e:	60a3      	str	r3, [r4, #8]
 8000850:	bb39      	cbnz	r1, 80008a2 <_puts_r+0x9e>
 8000852:	2b00      	cmp	r3, #0
 8000854:	da38      	bge.n	80008c8 <_puts_r+0xc4>
 8000856:	4622      	mov	r2, r4
 8000858:	210a      	movs	r1, #10
 800085a:	4628      	mov	r0, r5
 800085c:	f000 f848 	bl	80008f0 <__swbuf_r>
 8000860:	3001      	adds	r0, #1
 8000862:	d011      	beq.n	8000888 <_puts_r+0x84>
 8000864:	250a      	movs	r5, #10
 8000866:	e011      	b.n	800088c <_puts_r+0x88>
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <_puts_r+0xd4>)
 800086a:	429c      	cmp	r4, r3
 800086c:	d101      	bne.n	8000872 <_puts_r+0x6e>
 800086e:	68ac      	ldr	r4, [r5, #8]
 8000870:	e7da      	b.n	8000828 <_puts_r+0x24>
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <_puts_r+0xd8>)
 8000874:	429c      	cmp	r4, r3
 8000876:	bf08      	it	eq
 8000878:	68ec      	ldreq	r4, [r5, #12]
 800087a:	e7d5      	b.n	8000828 <_puts_r+0x24>
 800087c:	4621      	mov	r1, r4
 800087e:	4628      	mov	r0, r5
 8000880:	f000 f888 	bl	8000994 <__swsetup_r>
 8000884:	2800      	cmp	r0, #0
 8000886:	d0dd      	beq.n	8000844 <_puts_r+0x40>
 8000888:	f04f 35ff 	mov.w	r5, #4294967295
 800088c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800088e:	07da      	lsls	r2, r3, #31
 8000890:	d405      	bmi.n	800089e <_puts_r+0x9a>
 8000892:	89a3      	ldrh	r3, [r4, #12]
 8000894:	059b      	lsls	r3, r3, #22
 8000896:	d402      	bmi.n	800089e <_puts_r+0x9a>
 8000898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800089a:	f000 faa2 	bl	8000de2 <__retarget_lock_release_recursive>
 800089e:	4628      	mov	r0, r5
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	da04      	bge.n	80008b0 <_puts_r+0xac>
 80008a6:	69a2      	ldr	r2, [r4, #24]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	dc06      	bgt.n	80008ba <_puts_r+0xb6>
 80008ac:	290a      	cmp	r1, #10
 80008ae:	d004      	beq.n	80008ba <_puts_r+0xb6>
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	6022      	str	r2, [r4, #0]
 80008b6:	7019      	strb	r1, [r3, #0]
 80008b8:	e7c5      	b.n	8000846 <_puts_r+0x42>
 80008ba:	4622      	mov	r2, r4
 80008bc:	4628      	mov	r0, r5
 80008be:	f000 f817 	bl	80008f0 <__swbuf_r>
 80008c2:	3001      	adds	r0, #1
 80008c4:	d1bf      	bne.n	8000846 <_puts_r+0x42>
 80008c6:	e7df      	b.n	8000888 <_puts_r+0x84>
 80008c8:	6823      	ldr	r3, [r4, #0]
 80008ca:	250a      	movs	r5, #10
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	6022      	str	r2, [r4, #0]
 80008d0:	701d      	strb	r5, [r3, #0]
 80008d2:	e7db      	b.n	800088c <_puts_r+0x88>
 80008d4:	080012b0 	.word	0x080012b0
 80008d8:	080012d0 	.word	0x080012d0
 80008dc:	08001290 	.word	0x08001290

080008e0 <puts>:
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <puts+0xc>)
 80008e2:	4601      	mov	r1, r0
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f7ff bf8d 	b.w	8000804 <_puts_r>
 80008ea:	bf00      	nop
 80008ec:	20000004 	.word	0x20000004

080008f0 <__swbuf_r>:
 80008f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f2:	460e      	mov	r6, r1
 80008f4:	4614      	mov	r4, r2
 80008f6:	4605      	mov	r5, r0
 80008f8:	b118      	cbz	r0, 8000902 <__swbuf_r+0x12>
 80008fa:	6983      	ldr	r3, [r0, #24]
 80008fc:	b90b      	cbnz	r3, 8000902 <__swbuf_r+0x12>
 80008fe:	f000 f9d1 	bl	8000ca4 <__sinit>
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <__swbuf_r+0x98>)
 8000904:	429c      	cmp	r4, r3
 8000906:	d12b      	bne.n	8000960 <__swbuf_r+0x70>
 8000908:	686c      	ldr	r4, [r5, #4]
 800090a:	69a3      	ldr	r3, [r4, #24]
 800090c:	60a3      	str	r3, [r4, #8]
 800090e:	89a3      	ldrh	r3, [r4, #12]
 8000910:	071a      	lsls	r2, r3, #28
 8000912:	d52f      	bpl.n	8000974 <__swbuf_r+0x84>
 8000914:	6923      	ldr	r3, [r4, #16]
 8000916:	b36b      	cbz	r3, 8000974 <__swbuf_r+0x84>
 8000918:	6923      	ldr	r3, [r4, #16]
 800091a:	6820      	ldr	r0, [r4, #0]
 800091c:	1ac0      	subs	r0, r0, r3
 800091e:	6963      	ldr	r3, [r4, #20]
 8000920:	b2f6      	uxtb	r6, r6
 8000922:	4283      	cmp	r3, r0
 8000924:	4637      	mov	r7, r6
 8000926:	dc04      	bgt.n	8000932 <__swbuf_r+0x42>
 8000928:	4621      	mov	r1, r4
 800092a:	4628      	mov	r0, r5
 800092c:	f000 f926 	bl	8000b7c <_fflush_r>
 8000930:	bb30      	cbnz	r0, 8000980 <__swbuf_r+0x90>
 8000932:	68a3      	ldr	r3, [r4, #8]
 8000934:	3b01      	subs	r3, #1
 8000936:	60a3      	str	r3, [r4, #8]
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	6022      	str	r2, [r4, #0]
 800093e:	701e      	strb	r6, [r3, #0]
 8000940:	6963      	ldr	r3, [r4, #20]
 8000942:	3001      	adds	r0, #1
 8000944:	4283      	cmp	r3, r0
 8000946:	d004      	beq.n	8000952 <__swbuf_r+0x62>
 8000948:	89a3      	ldrh	r3, [r4, #12]
 800094a:	07db      	lsls	r3, r3, #31
 800094c:	d506      	bpl.n	800095c <__swbuf_r+0x6c>
 800094e:	2e0a      	cmp	r6, #10
 8000950:	d104      	bne.n	800095c <__swbuf_r+0x6c>
 8000952:	4621      	mov	r1, r4
 8000954:	4628      	mov	r0, r5
 8000956:	f000 f911 	bl	8000b7c <_fflush_r>
 800095a:	b988      	cbnz	r0, 8000980 <__swbuf_r+0x90>
 800095c:	4638      	mov	r0, r7
 800095e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <__swbuf_r+0x9c>)
 8000962:	429c      	cmp	r4, r3
 8000964:	d101      	bne.n	800096a <__swbuf_r+0x7a>
 8000966:	68ac      	ldr	r4, [r5, #8]
 8000968:	e7cf      	b.n	800090a <__swbuf_r+0x1a>
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <__swbuf_r+0xa0>)
 800096c:	429c      	cmp	r4, r3
 800096e:	bf08      	it	eq
 8000970:	68ec      	ldreq	r4, [r5, #12]
 8000972:	e7ca      	b.n	800090a <__swbuf_r+0x1a>
 8000974:	4621      	mov	r1, r4
 8000976:	4628      	mov	r0, r5
 8000978:	f000 f80c 	bl	8000994 <__swsetup_r>
 800097c:	2800      	cmp	r0, #0
 800097e:	d0cb      	beq.n	8000918 <__swbuf_r+0x28>
 8000980:	f04f 37ff 	mov.w	r7, #4294967295
 8000984:	e7ea      	b.n	800095c <__swbuf_r+0x6c>
 8000986:	bf00      	nop
 8000988:	080012b0 	.word	0x080012b0
 800098c:	080012d0 	.word	0x080012d0
 8000990:	08001290 	.word	0x08001290

08000994 <__swsetup_r>:
 8000994:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <__swsetup_r+0xcc>)
 8000996:	b570      	push	{r4, r5, r6, lr}
 8000998:	681d      	ldr	r5, [r3, #0]
 800099a:	4606      	mov	r6, r0
 800099c:	460c      	mov	r4, r1
 800099e:	b125      	cbz	r5, 80009aa <__swsetup_r+0x16>
 80009a0:	69ab      	ldr	r3, [r5, #24]
 80009a2:	b913      	cbnz	r3, 80009aa <__swsetup_r+0x16>
 80009a4:	4628      	mov	r0, r5
 80009a6:	f000 f97d 	bl	8000ca4 <__sinit>
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <__swsetup_r+0xd0>)
 80009ac:	429c      	cmp	r4, r3
 80009ae:	d10f      	bne.n	80009d0 <__swsetup_r+0x3c>
 80009b0:	686c      	ldr	r4, [r5, #4]
 80009b2:	89a3      	ldrh	r3, [r4, #12]
 80009b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009b8:	0719      	lsls	r1, r3, #28
 80009ba:	d42c      	bmi.n	8000a16 <__swsetup_r+0x82>
 80009bc:	06dd      	lsls	r5, r3, #27
 80009be:	d411      	bmi.n	80009e4 <__swsetup_r+0x50>
 80009c0:	2309      	movs	r3, #9
 80009c2:	6033      	str	r3, [r6, #0]
 80009c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80009c8:	81a3      	strh	r3, [r4, #12]
 80009ca:	f04f 30ff 	mov.w	r0, #4294967295
 80009ce:	e03e      	b.n	8000a4e <__swsetup_r+0xba>
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <__swsetup_r+0xd4>)
 80009d2:	429c      	cmp	r4, r3
 80009d4:	d101      	bne.n	80009da <__swsetup_r+0x46>
 80009d6:	68ac      	ldr	r4, [r5, #8]
 80009d8:	e7eb      	b.n	80009b2 <__swsetup_r+0x1e>
 80009da:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <__swsetup_r+0xd8>)
 80009dc:	429c      	cmp	r4, r3
 80009de:	bf08      	it	eq
 80009e0:	68ec      	ldreq	r4, [r5, #12]
 80009e2:	e7e6      	b.n	80009b2 <__swsetup_r+0x1e>
 80009e4:	0758      	lsls	r0, r3, #29
 80009e6:	d512      	bpl.n	8000a0e <__swsetup_r+0x7a>
 80009e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009ea:	b141      	cbz	r1, 80009fe <__swsetup_r+0x6a>
 80009ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009f0:	4299      	cmp	r1, r3
 80009f2:	d002      	beq.n	80009fa <__swsetup_r+0x66>
 80009f4:	4630      	mov	r0, r6
 80009f6:	f000 fa5b 	bl	8000eb0 <_free_r>
 80009fa:	2300      	movs	r3, #0
 80009fc:	6363      	str	r3, [r4, #52]	; 0x34
 80009fe:	89a3      	ldrh	r3, [r4, #12]
 8000a00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a04:	81a3      	strh	r3, [r4, #12]
 8000a06:	2300      	movs	r3, #0
 8000a08:	6063      	str	r3, [r4, #4]
 8000a0a:	6923      	ldr	r3, [r4, #16]
 8000a0c:	6023      	str	r3, [r4, #0]
 8000a0e:	89a3      	ldrh	r3, [r4, #12]
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	81a3      	strh	r3, [r4, #12]
 8000a16:	6923      	ldr	r3, [r4, #16]
 8000a18:	b94b      	cbnz	r3, 8000a2e <__swsetup_r+0x9a>
 8000a1a:	89a3      	ldrh	r3, [r4, #12]
 8000a1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a24:	d003      	beq.n	8000a2e <__swsetup_r+0x9a>
 8000a26:	4621      	mov	r1, r4
 8000a28:	4630      	mov	r0, r6
 8000a2a:	f000 fa01 	bl	8000e30 <__smakebuf_r>
 8000a2e:	89a0      	ldrh	r0, [r4, #12]
 8000a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a34:	f010 0301 	ands.w	r3, r0, #1
 8000a38:	d00a      	beq.n	8000a50 <__swsetup_r+0xbc>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60a3      	str	r3, [r4, #8]
 8000a3e:	6963      	ldr	r3, [r4, #20]
 8000a40:	425b      	negs	r3, r3
 8000a42:	61a3      	str	r3, [r4, #24]
 8000a44:	6923      	ldr	r3, [r4, #16]
 8000a46:	b943      	cbnz	r3, 8000a5a <__swsetup_r+0xc6>
 8000a48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a4c:	d1ba      	bne.n	80009c4 <__swsetup_r+0x30>
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	0781      	lsls	r1, r0, #30
 8000a52:	bf58      	it	pl
 8000a54:	6963      	ldrpl	r3, [r4, #20]
 8000a56:	60a3      	str	r3, [r4, #8]
 8000a58:	e7f4      	b.n	8000a44 <__swsetup_r+0xb0>
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	e7f7      	b.n	8000a4e <__swsetup_r+0xba>
 8000a5e:	bf00      	nop
 8000a60:	20000004 	.word	0x20000004
 8000a64:	080012b0 	.word	0x080012b0
 8000a68:	080012d0 	.word	0x080012d0
 8000a6c:	08001290 	.word	0x08001290

08000a70 <__sflush_r>:
 8000a70:	898a      	ldrh	r2, [r1, #12]
 8000a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a76:	4605      	mov	r5, r0
 8000a78:	0710      	lsls	r0, r2, #28
 8000a7a:	460c      	mov	r4, r1
 8000a7c:	d458      	bmi.n	8000b30 <__sflush_r+0xc0>
 8000a7e:	684b      	ldr	r3, [r1, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	dc05      	bgt.n	8000a90 <__sflush_r+0x20>
 8000a84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	dc02      	bgt.n	8000a90 <__sflush_r+0x20>
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d0f9      	beq.n	8000a8a <__sflush_r+0x1a>
 8000a96:	2300      	movs	r3, #0
 8000a98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a9c:	682f      	ldr	r7, [r5, #0]
 8000a9e:	602b      	str	r3, [r5, #0]
 8000aa0:	d032      	beq.n	8000b08 <__sflush_r+0x98>
 8000aa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000aa4:	89a3      	ldrh	r3, [r4, #12]
 8000aa6:	075a      	lsls	r2, r3, #29
 8000aa8:	d505      	bpl.n	8000ab6 <__sflush_r+0x46>
 8000aaa:	6863      	ldr	r3, [r4, #4]
 8000aac:	1ac0      	subs	r0, r0, r3
 8000aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ab0:	b10b      	cbz	r3, 8000ab6 <__sflush_r+0x46>
 8000ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ab4:	1ac0      	subs	r0, r0, r3
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	4602      	mov	r2, r0
 8000aba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000abc:	6a21      	ldr	r1, [r4, #32]
 8000abe:	4628      	mov	r0, r5
 8000ac0:	47b0      	blx	r6
 8000ac2:	1c43      	adds	r3, r0, #1
 8000ac4:	89a3      	ldrh	r3, [r4, #12]
 8000ac6:	d106      	bne.n	8000ad6 <__sflush_r+0x66>
 8000ac8:	6829      	ldr	r1, [r5, #0]
 8000aca:	291d      	cmp	r1, #29
 8000acc:	d82c      	bhi.n	8000b28 <__sflush_r+0xb8>
 8000ace:	4a2a      	ldr	r2, [pc, #168]	; (8000b78 <__sflush_r+0x108>)
 8000ad0:	40ca      	lsrs	r2, r1
 8000ad2:	07d6      	lsls	r6, r2, #31
 8000ad4:	d528      	bpl.n	8000b28 <__sflush_r+0xb8>
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	6062      	str	r2, [r4, #4]
 8000ada:	04d9      	lsls	r1, r3, #19
 8000adc:	6922      	ldr	r2, [r4, #16]
 8000ade:	6022      	str	r2, [r4, #0]
 8000ae0:	d504      	bpl.n	8000aec <__sflush_r+0x7c>
 8000ae2:	1c42      	adds	r2, r0, #1
 8000ae4:	d101      	bne.n	8000aea <__sflush_r+0x7a>
 8000ae6:	682b      	ldr	r3, [r5, #0]
 8000ae8:	b903      	cbnz	r3, 8000aec <__sflush_r+0x7c>
 8000aea:	6560      	str	r0, [r4, #84]	; 0x54
 8000aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000aee:	602f      	str	r7, [r5, #0]
 8000af0:	2900      	cmp	r1, #0
 8000af2:	d0ca      	beq.n	8000a8a <__sflush_r+0x1a>
 8000af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d002      	beq.n	8000b02 <__sflush_r+0x92>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f000 f9d7 	bl	8000eb0 <_free_r>
 8000b02:	2000      	movs	r0, #0
 8000b04:	6360      	str	r0, [r4, #52]	; 0x34
 8000b06:	e7c1      	b.n	8000a8c <__sflush_r+0x1c>
 8000b08:	6a21      	ldr	r1, [r4, #32]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	47b0      	blx	r6
 8000b10:	1c41      	adds	r1, r0, #1
 8000b12:	d1c7      	bne.n	8000aa4 <__sflush_r+0x34>
 8000b14:	682b      	ldr	r3, [r5, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0c4      	beq.n	8000aa4 <__sflush_r+0x34>
 8000b1a:	2b1d      	cmp	r3, #29
 8000b1c:	d001      	beq.n	8000b22 <__sflush_r+0xb2>
 8000b1e:	2b16      	cmp	r3, #22
 8000b20:	d101      	bne.n	8000b26 <__sflush_r+0xb6>
 8000b22:	602f      	str	r7, [r5, #0]
 8000b24:	e7b1      	b.n	8000a8a <__sflush_r+0x1a>
 8000b26:	89a3      	ldrh	r3, [r4, #12]
 8000b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2c:	81a3      	strh	r3, [r4, #12]
 8000b2e:	e7ad      	b.n	8000a8c <__sflush_r+0x1c>
 8000b30:	690f      	ldr	r7, [r1, #16]
 8000b32:	2f00      	cmp	r7, #0
 8000b34:	d0a9      	beq.n	8000a8a <__sflush_r+0x1a>
 8000b36:	0793      	lsls	r3, r2, #30
 8000b38:	680e      	ldr	r6, [r1, #0]
 8000b3a:	bf08      	it	eq
 8000b3c:	694b      	ldreq	r3, [r1, #20]
 8000b3e:	600f      	str	r7, [r1, #0]
 8000b40:	bf18      	it	ne
 8000b42:	2300      	movne	r3, #0
 8000b44:	eba6 0807 	sub.w	r8, r6, r7
 8000b48:	608b      	str	r3, [r1, #8]
 8000b4a:	f1b8 0f00 	cmp.w	r8, #0
 8000b4e:	dd9c      	ble.n	8000a8a <__sflush_r+0x1a>
 8000b50:	6a21      	ldr	r1, [r4, #32]
 8000b52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000b54:	4643      	mov	r3, r8
 8000b56:	463a      	mov	r2, r7
 8000b58:	4628      	mov	r0, r5
 8000b5a:	47b0      	blx	r6
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	dc06      	bgt.n	8000b6e <__sflush_r+0xfe>
 8000b60:	89a3      	ldrh	r3, [r4, #12]
 8000b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b66:	81a3      	strh	r3, [r4, #12]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	e78e      	b.n	8000a8c <__sflush_r+0x1c>
 8000b6e:	4407      	add	r7, r0
 8000b70:	eba8 0800 	sub.w	r8, r8, r0
 8000b74:	e7e9      	b.n	8000b4a <__sflush_r+0xda>
 8000b76:	bf00      	nop
 8000b78:	20400001 	.word	0x20400001

08000b7c <_fflush_r>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	690b      	ldr	r3, [r1, #16]
 8000b80:	4605      	mov	r5, r0
 8000b82:	460c      	mov	r4, r1
 8000b84:	b913      	cbnz	r3, 8000b8c <_fflush_r+0x10>
 8000b86:	2500      	movs	r5, #0
 8000b88:	4628      	mov	r0, r5
 8000b8a:	bd38      	pop	{r3, r4, r5, pc}
 8000b8c:	b118      	cbz	r0, 8000b96 <_fflush_r+0x1a>
 8000b8e:	6983      	ldr	r3, [r0, #24]
 8000b90:	b90b      	cbnz	r3, 8000b96 <_fflush_r+0x1a>
 8000b92:	f000 f887 	bl	8000ca4 <__sinit>
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <_fflush_r+0x6c>)
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	d11b      	bne.n	8000bd4 <_fflush_r+0x58>
 8000b9c:	686c      	ldr	r4, [r5, #4]
 8000b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0ef      	beq.n	8000b86 <_fflush_r+0xa>
 8000ba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ba8:	07d0      	lsls	r0, r2, #31
 8000baa:	d404      	bmi.n	8000bb6 <_fflush_r+0x3a>
 8000bac:	0599      	lsls	r1, r3, #22
 8000bae:	d402      	bmi.n	8000bb6 <_fflush_r+0x3a>
 8000bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bb2:	f000 f915 	bl	8000de0 <__retarget_lock_acquire_recursive>
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	4621      	mov	r1, r4
 8000bba:	f7ff ff59 	bl	8000a70 <__sflush_r>
 8000bbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000bc0:	07da      	lsls	r2, r3, #31
 8000bc2:	4605      	mov	r5, r0
 8000bc4:	d4e0      	bmi.n	8000b88 <_fflush_r+0xc>
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	059b      	lsls	r3, r3, #22
 8000bca:	d4dd      	bmi.n	8000b88 <_fflush_r+0xc>
 8000bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bce:	f000 f908 	bl	8000de2 <__retarget_lock_release_recursive>
 8000bd2:	e7d9      	b.n	8000b88 <_fflush_r+0xc>
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <_fflush_r+0x70>)
 8000bd6:	429c      	cmp	r4, r3
 8000bd8:	d101      	bne.n	8000bde <_fflush_r+0x62>
 8000bda:	68ac      	ldr	r4, [r5, #8]
 8000bdc:	e7df      	b.n	8000b9e <_fflush_r+0x22>
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <_fflush_r+0x74>)
 8000be0:	429c      	cmp	r4, r3
 8000be2:	bf08      	it	eq
 8000be4:	68ec      	ldreq	r4, [r5, #12]
 8000be6:	e7da      	b.n	8000b9e <_fflush_r+0x22>
 8000be8:	080012b0 	.word	0x080012b0
 8000bec:	080012d0 	.word	0x080012d0
 8000bf0:	08001290 	.word	0x08001290

08000bf4 <std>:
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	b510      	push	{r4, lr}
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8000bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c02:	6083      	str	r3, [r0, #8]
 8000c04:	8181      	strh	r1, [r0, #12]
 8000c06:	6643      	str	r3, [r0, #100]	; 0x64
 8000c08:	81c2      	strh	r2, [r0, #14]
 8000c0a:	6183      	str	r3, [r0, #24]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	2208      	movs	r2, #8
 8000c10:	305c      	adds	r0, #92	; 0x5c
 8000c12:	f7ff fdef 	bl	80007f4 <memset>
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <std+0x38>)
 8000c18:	6263      	str	r3, [r4, #36]	; 0x24
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <std+0x3c>)
 8000c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <std+0x40>)
 8000c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <std+0x44>)
 8000c24:	6224      	str	r4, [r4, #32]
 8000c26:	6323      	str	r3, [r4, #48]	; 0x30
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08001091 	.word	0x08001091
 8000c30:	080010b3 	.word	0x080010b3
 8000c34:	080010eb 	.word	0x080010eb
 8000c38:	0800110f 	.word	0x0800110f

08000c3c <_cleanup_r>:
 8000c3c:	4901      	ldr	r1, [pc, #4]	; (8000c44 <_cleanup_r+0x8>)
 8000c3e:	f000 b8af 	b.w	8000da0 <_fwalk_reent>
 8000c42:	bf00      	nop
 8000c44:	08000b7d 	.word	0x08000b7d

08000c48 <__sfmoreglue>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	2268      	movs	r2, #104	; 0x68
 8000c4c:	1e4d      	subs	r5, r1, #1
 8000c4e:	4355      	muls	r5, r2
 8000c50:	460e      	mov	r6, r1
 8000c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c56:	f000 f997 	bl	8000f88 <_malloc_r>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	b140      	cbz	r0, 8000c70 <__sfmoreglue+0x28>
 8000c5e:	2100      	movs	r1, #0
 8000c60:	e9c0 1600 	strd	r1, r6, [r0]
 8000c64:	300c      	adds	r0, #12
 8000c66:	60a0      	str	r0, [r4, #8]
 8000c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c6c:	f7ff fdc2 	bl	80007f4 <memset>
 8000c70:	4620      	mov	r0, r4
 8000c72:	bd70      	pop	{r4, r5, r6, pc}

08000c74 <__sfp_lock_acquire>:
 8000c74:	4801      	ldr	r0, [pc, #4]	; (8000c7c <__sfp_lock_acquire+0x8>)
 8000c76:	f000 b8b3 	b.w	8000de0 <__retarget_lock_acquire_recursive>
 8000c7a:	bf00      	nop
 8000c7c:	200000dd 	.word	0x200000dd

08000c80 <__sfp_lock_release>:
 8000c80:	4801      	ldr	r0, [pc, #4]	; (8000c88 <__sfp_lock_release+0x8>)
 8000c82:	f000 b8ae 	b.w	8000de2 <__retarget_lock_release_recursive>
 8000c86:	bf00      	nop
 8000c88:	200000dd 	.word	0x200000dd

08000c8c <__sinit_lock_acquire>:
 8000c8c:	4801      	ldr	r0, [pc, #4]	; (8000c94 <__sinit_lock_acquire+0x8>)
 8000c8e:	f000 b8a7 	b.w	8000de0 <__retarget_lock_acquire_recursive>
 8000c92:	bf00      	nop
 8000c94:	200000de 	.word	0x200000de

08000c98 <__sinit_lock_release>:
 8000c98:	4801      	ldr	r0, [pc, #4]	; (8000ca0 <__sinit_lock_release+0x8>)
 8000c9a:	f000 b8a2 	b.w	8000de2 <__retarget_lock_release_recursive>
 8000c9e:	bf00      	nop
 8000ca0:	200000de 	.word	0x200000de

08000ca4 <__sinit>:
 8000ca4:	b510      	push	{r4, lr}
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	f7ff fff0 	bl	8000c8c <__sinit_lock_acquire>
 8000cac:	69a3      	ldr	r3, [r4, #24]
 8000cae:	b11b      	cbz	r3, 8000cb8 <__sinit+0x14>
 8000cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cb4:	f7ff bff0 	b.w	8000c98 <__sinit_lock_release>
 8000cb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000cbc:	6523      	str	r3, [r4, #80]	; 0x50
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <__sinit+0x68>)
 8000cc0:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <__sinit+0x6c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	bf04      	itt	eq
 8000cca:	2301      	moveq	r3, #1
 8000ccc:	61a3      	streq	r3, [r4, #24]
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f000 f820 	bl	8000d14 <__sfp>
 8000cd4:	6060      	str	r0, [r4, #4]
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f000 f81c 	bl	8000d14 <__sfp>
 8000cdc:	60a0      	str	r0, [r4, #8]
 8000cde:	4620      	mov	r0, r4
 8000ce0:	f000 f818 	bl	8000d14 <__sfp>
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60e0      	str	r0, [r4, #12]
 8000ce8:	2104      	movs	r1, #4
 8000cea:	6860      	ldr	r0, [r4, #4]
 8000cec:	f7ff ff82 	bl	8000bf4 <std>
 8000cf0:	68a0      	ldr	r0, [r4, #8]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2109      	movs	r1, #9
 8000cf6:	f7ff ff7d 	bl	8000bf4 <std>
 8000cfa:	68e0      	ldr	r0, [r4, #12]
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	2112      	movs	r1, #18
 8000d00:	f7ff ff78 	bl	8000bf4 <std>
 8000d04:	2301      	movs	r3, #1
 8000d06:	61a3      	str	r3, [r4, #24]
 8000d08:	e7d2      	b.n	8000cb0 <__sinit+0xc>
 8000d0a:	bf00      	nop
 8000d0c:	0800128c 	.word	0x0800128c
 8000d10:	08000c3d 	.word	0x08000c3d

08000d14 <__sfp>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	4607      	mov	r7, r0
 8000d18:	f7ff ffac 	bl	8000c74 <__sfp_lock_acquire>
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <__sfp+0x84>)
 8000d1e:	681e      	ldr	r6, [r3, #0]
 8000d20:	69b3      	ldr	r3, [r6, #24]
 8000d22:	b913      	cbnz	r3, 8000d2a <__sfp+0x16>
 8000d24:	4630      	mov	r0, r6
 8000d26:	f7ff ffbd 	bl	8000ca4 <__sinit>
 8000d2a:	3648      	adds	r6, #72	; 0x48
 8000d2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	d503      	bpl.n	8000d3c <__sfp+0x28>
 8000d34:	6833      	ldr	r3, [r6, #0]
 8000d36:	b30b      	cbz	r3, 8000d7c <__sfp+0x68>
 8000d38:	6836      	ldr	r6, [r6, #0]
 8000d3a:	e7f7      	b.n	8000d2c <__sfp+0x18>
 8000d3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d40:	b9d5      	cbnz	r5, 8000d78 <__sfp+0x64>
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <__sfp+0x88>)
 8000d44:	60e3      	str	r3, [r4, #12]
 8000d46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d4a:	6665      	str	r5, [r4, #100]	; 0x64
 8000d4c:	f000 f847 	bl	8000dde <__retarget_lock_init_recursive>
 8000d50:	f7ff ff96 	bl	8000c80 <__sfp_lock_release>
 8000d54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d5c:	6025      	str	r5, [r4, #0]
 8000d5e:	61a5      	str	r5, [r4, #24]
 8000d60:	2208      	movs	r2, #8
 8000d62:	4629      	mov	r1, r5
 8000d64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d68:	f7ff fd44 	bl	80007f4 <memset>
 8000d6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d74:	4620      	mov	r0, r4
 8000d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d78:	3468      	adds	r4, #104	; 0x68
 8000d7a:	e7d9      	b.n	8000d30 <__sfp+0x1c>
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	4638      	mov	r0, r7
 8000d80:	f7ff ff62 	bl	8000c48 <__sfmoreglue>
 8000d84:	4604      	mov	r4, r0
 8000d86:	6030      	str	r0, [r6, #0]
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	d1d5      	bne.n	8000d38 <__sfp+0x24>
 8000d8c:	f7ff ff78 	bl	8000c80 <__sfp_lock_release>
 8000d90:	230c      	movs	r3, #12
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	e7ee      	b.n	8000d74 <__sfp+0x60>
 8000d96:	bf00      	nop
 8000d98:	0800128c 	.word	0x0800128c
 8000d9c:	ffff0001 	.word	0xffff0001

08000da0 <_fwalk_reent>:
 8000da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000da4:	4606      	mov	r6, r0
 8000da6:	4688      	mov	r8, r1
 8000da8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000dac:	2700      	movs	r7, #0
 8000dae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000db2:	f1b9 0901 	subs.w	r9, r9, #1
 8000db6:	d505      	bpl.n	8000dc4 <_fwalk_reent+0x24>
 8000db8:	6824      	ldr	r4, [r4, #0]
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	d1f7      	bne.n	8000dae <_fwalk_reent+0xe>
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dc4:	89ab      	ldrh	r3, [r5, #12]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d907      	bls.n	8000dda <_fwalk_reent+0x3a>
 8000dca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	d003      	beq.n	8000dda <_fwalk_reent+0x3a>
 8000dd2:	4629      	mov	r1, r5
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	47c0      	blx	r8
 8000dd8:	4307      	orrs	r7, r0
 8000dda:	3568      	adds	r5, #104	; 0x68
 8000ddc:	e7e9      	b.n	8000db2 <_fwalk_reent+0x12>

08000dde <__retarget_lock_init_recursive>:
 8000dde:	4770      	bx	lr

08000de0 <__retarget_lock_acquire_recursive>:
 8000de0:	4770      	bx	lr

08000de2 <__retarget_lock_release_recursive>:
 8000de2:	4770      	bx	lr

08000de4 <__swhatbuf_r>:
 8000de4:	b570      	push	{r4, r5, r6, lr}
 8000de6:	460e      	mov	r6, r1
 8000de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dec:	2900      	cmp	r1, #0
 8000dee:	b096      	sub	sp, #88	; 0x58
 8000df0:	4614      	mov	r4, r2
 8000df2:	461d      	mov	r5, r3
 8000df4:	da08      	bge.n	8000e08 <__swhatbuf_r+0x24>
 8000df6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	602a      	str	r2, [r5, #0]
 8000dfe:	061a      	lsls	r2, r3, #24
 8000e00:	d410      	bmi.n	8000e24 <__swhatbuf_r+0x40>
 8000e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e06:	e00e      	b.n	8000e26 <__swhatbuf_r+0x42>
 8000e08:	466a      	mov	r2, sp
 8000e0a:	f000 f9a7 	bl	800115c <_fstat_r>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	dbf1      	blt.n	8000df6 <__swhatbuf_r+0x12>
 8000e12:	9a01      	ldr	r2, [sp, #4]
 8000e14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e1c:	425a      	negs	r2, r3
 8000e1e:	415a      	adcs	r2, r3
 8000e20:	602a      	str	r2, [r5, #0]
 8000e22:	e7ee      	b.n	8000e02 <__swhatbuf_r+0x1e>
 8000e24:	2340      	movs	r3, #64	; 0x40
 8000e26:	2000      	movs	r0, #0
 8000e28:	6023      	str	r3, [r4, #0]
 8000e2a:	b016      	add	sp, #88	; 0x58
 8000e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e30 <__smakebuf_r>:
 8000e30:	898b      	ldrh	r3, [r1, #12]
 8000e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e34:	079d      	lsls	r5, r3, #30
 8000e36:	4606      	mov	r6, r0
 8000e38:	460c      	mov	r4, r1
 8000e3a:	d507      	bpl.n	8000e4c <__smakebuf_r+0x1c>
 8000e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e40:	6023      	str	r3, [r4, #0]
 8000e42:	6123      	str	r3, [r4, #16]
 8000e44:	2301      	movs	r3, #1
 8000e46:	6163      	str	r3, [r4, #20]
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}
 8000e4c:	ab01      	add	r3, sp, #4
 8000e4e:	466a      	mov	r2, sp
 8000e50:	f7ff ffc8 	bl	8000de4 <__swhatbuf_r>
 8000e54:	9900      	ldr	r1, [sp, #0]
 8000e56:	4605      	mov	r5, r0
 8000e58:	4630      	mov	r0, r6
 8000e5a:	f000 f895 	bl	8000f88 <_malloc_r>
 8000e5e:	b948      	cbnz	r0, 8000e74 <__smakebuf_r+0x44>
 8000e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e64:	059a      	lsls	r2, r3, #22
 8000e66:	d4ef      	bmi.n	8000e48 <__smakebuf_r+0x18>
 8000e68:	f023 0303 	bic.w	r3, r3, #3
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	81a3      	strh	r3, [r4, #12]
 8000e72:	e7e3      	b.n	8000e3c <__smakebuf_r+0xc>
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <__smakebuf_r+0x7c>)
 8000e76:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e78:	89a3      	ldrh	r3, [r4, #12]
 8000e7a:	6020      	str	r0, [r4, #0]
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	81a3      	strh	r3, [r4, #12]
 8000e82:	9b00      	ldr	r3, [sp, #0]
 8000e84:	6163      	str	r3, [r4, #20]
 8000e86:	9b01      	ldr	r3, [sp, #4]
 8000e88:	6120      	str	r0, [r4, #16]
 8000e8a:	b15b      	cbz	r3, 8000ea4 <__smakebuf_r+0x74>
 8000e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e90:	4630      	mov	r0, r6
 8000e92:	f000 f975 	bl	8001180 <_isatty_r>
 8000e96:	b128      	cbz	r0, 8000ea4 <__smakebuf_r+0x74>
 8000e98:	89a3      	ldrh	r3, [r4, #12]
 8000e9a:	f023 0303 	bic.w	r3, r3, #3
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	81a3      	strh	r3, [r4, #12]
 8000ea4:	89a0      	ldrh	r0, [r4, #12]
 8000ea6:	4305      	orrs	r5, r0
 8000ea8:	81a5      	strh	r5, [r4, #12]
 8000eaa:	e7cd      	b.n	8000e48 <__smakebuf_r+0x18>
 8000eac:	08000c3d 	.word	0x08000c3d

08000eb0 <_free_r>:
 8000eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d044      	beq.n	8000f40 <_free_r+0x90>
 8000eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000eba:	9001      	str	r0, [sp, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f1a1 0404 	sub.w	r4, r1, #4
 8000ec2:	bfb8      	it	lt
 8000ec4:	18e4      	addlt	r4, r4, r3
 8000ec6:	f000 f97d 	bl	80011c4 <__malloc_lock>
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <_free_r+0x94>)
 8000ecc:	9801      	ldr	r0, [sp, #4]
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	b933      	cbnz	r3, 8000ee0 <_free_r+0x30>
 8000ed2:	6063      	str	r3, [r4, #4]
 8000ed4:	6014      	str	r4, [r2, #0]
 8000ed6:	b003      	add	sp, #12
 8000ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000edc:	f000 b978 	b.w	80011d0 <__malloc_unlock>
 8000ee0:	42a3      	cmp	r3, r4
 8000ee2:	d908      	bls.n	8000ef6 <_free_r+0x46>
 8000ee4:	6825      	ldr	r5, [r4, #0]
 8000ee6:	1961      	adds	r1, r4, r5
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf01      	itttt	eq
 8000eec:	6819      	ldreq	r1, [r3, #0]
 8000eee:	685b      	ldreq	r3, [r3, #4]
 8000ef0:	1949      	addeq	r1, r1, r5
 8000ef2:	6021      	streq	r1, [r4, #0]
 8000ef4:	e7ed      	b.n	8000ed2 <_free_r+0x22>
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	b10b      	cbz	r3, 8000f00 <_free_r+0x50>
 8000efc:	42a3      	cmp	r3, r4
 8000efe:	d9fa      	bls.n	8000ef6 <_free_r+0x46>
 8000f00:	6811      	ldr	r1, [r2, #0]
 8000f02:	1855      	adds	r5, r2, r1
 8000f04:	42a5      	cmp	r5, r4
 8000f06:	d10b      	bne.n	8000f20 <_free_r+0x70>
 8000f08:	6824      	ldr	r4, [r4, #0]
 8000f0a:	4421      	add	r1, r4
 8000f0c:	1854      	adds	r4, r2, r1
 8000f0e:	42a3      	cmp	r3, r4
 8000f10:	6011      	str	r1, [r2, #0]
 8000f12:	d1e0      	bne.n	8000ed6 <_free_r+0x26>
 8000f14:	681c      	ldr	r4, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	6053      	str	r3, [r2, #4]
 8000f1a:	4421      	add	r1, r4
 8000f1c:	6011      	str	r1, [r2, #0]
 8000f1e:	e7da      	b.n	8000ed6 <_free_r+0x26>
 8000f20:	d902      	bls.n	8000f28 <_free_r+0x78>
 8000f22:	230c      	movs	r3, #12
 8000f24:	6003      	str	r3, [r0, #0]
 8000f26:	e7d6      	b.n	8000ed6 <_free_r+0x26>
 8000f28:	6825      	ldr	r5, [r4, #0]
 8000f2a:	1961      	adds	r1, r4, r5
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	bf04      	itt	eq
 8000f30:	6819      	ldreq	r1, [r3, #0]
 8000f32:	685b      	ldreq	r3, [r3, #4]
 8000f34:	6063      	str	r3, [r4, #4]
 8000f36:	bf04      	itt	eq
 8000f38:	1949      	addeq	r1, r1, r5
 8000f3a:	6021      	streq	r1, [r4, #0]
 8000f3c:	6054      	str	r4, [r2, #4]
 8000f3e:	e7ca      	b.n	8000ed6 <_free_r+0x26>
 8000f40:	b003      	add	sp, #12
 8000f42:	bd30      	pop	{r4, r5, pc}
 8000f44:	200000e0 	.word	0x200000e0

08000f48 <sbrk_aligned>:
 8000f48:	b570      	push	{r4, r5, r6, lr}
 8000f4a:	4e0e      	ldr	r6, [pc, #56]	; (8000f84 <sbrk_aligned+0x3c>)
 8000f4c:	460c      	mov	r4, r1
 8000f4e:	6831      	ldr	r1, [r6, #0]
 8000f50:	4605      	mov	r5, r0
 8000f52:	b911      	cbnz	r1, 8000f5a <sbrk_aligned+0x12>
 8000f54:	f000 f88c 	bl	8001070 <_sbrk_r>
 8000f58:	6030      	str	r0, [r6, #0]
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	f000 f887 	bl	8001070 <_sbrk_r>
 8000f62:	1c43      	adds	r3, r0, #1
 8000f64:	d00a      	beq.n	8000f7c <sbrk_aligned+0x34>
 8000f66:	1cc4      	adds	r4, r0, #3
 8000f68:	f024 0403 	bic.w	r4, r4, #3
 8000f6c:	42a0      	cmp	r0, r4
 8000f6e:	d007      	beq.n	8000f80 <sbrk_aligned+0x38>
 8000f70:	1a21      	subs	r1, r4, r0
 8000f72:	4628      	mov	r0, r5
 8000f74:	f000 f87c 	bl	8001070 <_sbrk_r>
 8000f78:	3001      	adds	r0, #1
 8000f7a:	d101      	bne.n	8000f80 <sbrk_aligned+0x38>
 8000f7c:	f04f 34ff 	mov.w	r4, #4294967295
 8000f80:	4620      	mov	r0, r4
 8000f82:	bd70      	pop	{r4, r5, r6, pc}
 8000f84:	200000e4 	.word	0x200000e4

08000f88 <_malloc_r>:
 8000f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f8c:	1ccd      	adds	r5, r1, #3
 8000f8e:	f025 0503 	bic.w	r5, r5, #3
 8000f92:	3508      	adds	r5, #8
 8000f94:	2d0c      	cmp	r5, #12
 8000f96:	bf38      	it	cc
 8000f98:	250c      	movcc	r5, #12
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	4607      	mov	r7, r0
 8000f9e:	db01      	blt.n	8000fa4 <_malloc_r+0x1c>
 8000fa0:	42a9      	cmp	r1, r5
 8000fa2:	d905      	bls.n	8000fb0 <_malloc_r+0x28>
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	2600      	movs	r6, #0
 8000faa:	4630      	mov	r0, r6
 8000fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fb0:	4e2e      	ldr	r6, [pc, #184]	; (800106c <_malloc_r+0xe4>)
 8000fb2:	f000 f907 	bl	80011c4 <__malloc_lock>
 8000fb6:	6833      	ldr	r3, [r6, #0]
 8000fb8:	461c      	mov	r4, r3
 8000fba:	bb34      	cbnz	r4, 800100a <_malloc_r+0x82>
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f7ff ffc2 	bl	8000f48 <sbrk_aligned>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	d14d      	bne.n	8001066 <_malloc_r+0xde>
 8000fca:	6834      	ldr	r4, [r6, #0]
 8000fcc:	4626      	mov	r6, r4
 8000fce:	2e00      	cmp	r6, #0
 8000fd0:	d140      	bne.n	8001054 <_malloc_r+0xcc>
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	4631      	mov	r1, r6
 8000fd6:	4638      	mov	r0, r7
 8000fd8:	eb04 0803 	add.w	r8, r4, r3
 8000fdc:	f000 f848 	bl	8001070 <_sbrk_r>
 8000fe0:	4580      	cmp	r8, r0
 8000fe2:	d13a      	bne.n	800105a <_malloc_r+0xd2>
 8000fe4:	6821      	ldr	r1, [r4, #0]
 8000fe6:	3503      	adds	r5, #3
 8000fe8:	1a6d      	subs	r5, r5, r1
 8000fea:	f025 0503 	bic.w	r5, r5, #3
 8000fee:	3508      	adds	r5, #8
 8000ff0:	2d0c      	cmp	r5, #12
 8000ff2:	bf38      	it	cc
 8000ff4:	250c      	movcc	r5, #12
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	4638      	mov	r0, r7
 8000ffa:	f7ff ffa5 	bl	8000f48 <sbrk_aligned>
 8000ffe:	3001      	adds	r0, #1
 8001000:	d02b      	beq.n	800105a <_malloc_r+0xd2>
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	442b      	add	r3, r5
 8001006:	6023      	str	r3, [r4, #0]
 8001008:	e00e      	b.n	8001028 <_malloc_r+0xa0>
 800100a:	6822      	ldr	r2, [r4, #0]
 800100c:	1b52      	subs	r2, r2, r5
 800100e:	d41e      	bmi.n	800104e <_malloc_r+0xc6>
 8001010:	2a0b      	cmp	r2, #11
 8001012:	d916      	bls.n	8001042 <_malloc_r+0xba>
 8001014:	1961      	adds	r1, r4, r5
 8001016:	42a3      	cmp	r3, r4
 8001018:	6025      	str	r5, [r4, #0]
 800101a:	bf18      	it	ne
 800101c:	6059      	strne	r1, [r3, #4]
 800101e:	6863      	ldr	r3, [r4, #4]
 8001020:	bf08      	it	eq
 8001022:	6031      	streq	r1, [r6, #0]
 8001024:	5162      	str	r2, [r4, r5]
 8001026:	604b      	str	r3, [r1, #4]
 8001028:	4638      	mov	r0, r7
 800102a:	f104 060b 	add.w	r6, r4, #11
 800102e:	f000 f8cf 	bl	80011d0 <__malloc_unlock>
 8001032:	f026 0607 	bic.w	r6, r6, #7
 8001036:	1d23      	adds	r3, r4, #4
 8001038:	1af2      	subs	r2, r6, r3
 800103a:	d0b6      	beq.n	8000faa <_malloc_r+0x22>
 800103c:	1b9b      	subs	r3, r3, r6
 800103e:	50a3      	str	r3, [r4, r2]
 8001040:	e7b3      	b.n	8000faa <_malloc_r+0x22>
 8001042:	6862      	ldr	r2, [r4, #4]
 8001044:	42a3      	cmp	r3, r4
 8001046:	bf0c      	ite	eq
 8001048:	6032      	streq	r2, [r6, #0]
 800104a:	605a      	strne	r2, [r3, #4]
 800104c:	e7ec      	b.n	8001028 <_malloc_r+0xa0>
 800104e:	4623      	mov	r3, r4
 8001050:	6864      	ldr	r4, [r4, #4]
 8001052:	e7b2      	b.n	8000fba <_malloc_r+0x32>
 8001054:	4634      	mov	r4, r6
 8001056:	6876      	ldr	r6, [r6, #4]
 8001058:	e7b9      	b.n	8000fce <_malloc_r+0x46>
 800105a:	230c      	movs	r3, #12
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4638      	mov	r0, r7
 8001060:	f000 f8b6 	bl	80011d0 <__malloc_unlock>
 8001064:	e7a1      	b.n	8000faa <_malloc_r+0x22>
 8001066:	6025      	str	r5, [r4, #0]
 8001068:	e7de      	b.n	8001028 <_malloc_r+0xa0>
 800106a:	bf00      	nop
 800106c:	200000e0 	.word	0x200000e0

08001070 <_sbrk_r>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4d06      	ldr	r5, [pc, #24]	; (800108c <_sbrk_r+0x1c>)
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	4608      	mov	r0, r1
 800107a:	602b      	str	r3, [r5, #0]
 800107c:	f7ff fb30 	bl	80006e0 <_sbrk>
 8001080:	1c43      	adds	r3, r0, #1
 8001082:	d102      	bne.n	800108a <_sbrk_r+0x1a>
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	b103      	cbz	r3, 800108a <_sbrk_r+0x1a>
 8001088:	6023      	str	r3, [r4, #0]
 800108a:	bd38      	pop	{r3, r4, r5, pc}
 800108c:	200000e8 	.word	0x200000e8

08001090 <__sread>:
 8001090:	b510      	push	{r4, lr}
 8001092:	460c      	mov	r4, r1
 8001094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001098:	f000 f8a0 	bl	80011dc <_read_r>
 800109c:	2800      	cmp	r0, #0
 800109e:	bfab      	itete	ge
 80010a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80010a2:	89a3      	ldrhlt	r3, [r4, #12]
 80010a4:	181b      	addge	r3, r3, r0
 80010a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80010aa:	bfac      	ite	ge
 80010ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80010ae:	81a3      	strhlt	r3, [r4, #12]
 80010b0:	bd10      	pop	{r4, pc}

080010b2 <__swrite>:
 80010b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010b6:	461f      	mov	r7, r3
 80010b8:	898b      	ldrh	r3, [r1, #12]
 80010ba:	05db      	lsls	r3, r3, #23
 80010bc:	4605      	mov	r5, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	4616      	mov	r6, r2
 80010c2:	d505      	bpl.n	80010d0 <__swrite+0x1e>
 80010c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010c8:	2302      	movs	r3, #2
 80010ca:	2200      	movs	r2, #0
 80010cc:	f000 f868 	bl	80011a0 <_lseek_r>
 80010d0:	89a3      	ldrh	r3, [r4, #12]
 80010d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010da:	81a3      	strh	r3, [r4, #12]
 80010dc:	4632      	mov	r2, r6
 80010de:	463b      	mov	r3, r7
 80010e0:	4628      	mov	r0, r5
 80010e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010e6:	f000 b817 	b.w	8001118 <_write_r>

080010ea <__sseek>:
 80010ea:	b510      	push	{r4, lr}
 80010ec:	460c      	mov	r4, r1
 80010ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010f2:	f000 f855 	bl	80011a0 <_lseek_r>
 80010f6:	1c43      	adds	r3, r0, #1
 80010f8:	89a3      	ldrh	r3, [r4, #12]
 80010fa:	bf15      	itete	ne
 80010fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80010fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001106:	81a3      	strheq	r3, [r4, #12]
 8001108:	bf18      	it	ne
 800110a:	81a3      	strhne	r3, [r4, #12]
 800110c:	bd10      	pop	{r4, pc}

0800110e <__sclose>:
 800110e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001112:	f000 b813 	b.w	800113c <_close_r>
	...

08001118 <_write_r>:
 8001118:	b538      	push	{r3, r4, r5, lr}
 800111a:	4d07      	ldr	r5, [pc, #28]	; (8001138 <_write_r+0x20>)
 800111c:	4604      	mov	r4, r0
 800111e:	4608      	mov	r0, r1
 8001120:	4611      	mov	r1, r2
 8001122:	2200      	movs	r2, #0
 8001124:	602a      	str	r2, [r5, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	f7ff fa89 	bl	800063e <_write>
 800112c:	1c43      	adds	r3, r0, #1
 800112e:	d102      	bne.n	8001136 <_write_r+0x1e>
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	b103      	cbz	r3, 8001136 <_write_r+0x1e>
 8001134:	6023      	str	r3, [r4, #0]
 8001136:	bd38      	pop	{r3, r4, r5, pc}
 8001138:	200000e8 	.word	0x200000e8

0800113c <_close_r>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4d06      	ldr	r5, [pc, #24]	; (8001158 <_close_r+0x1c>)
 8001140:	2300      	movs	r3, #0
 8001142:	4604      	mov	r4, r0
 8001144:	4608      	mov	r0, r1
 8001146:	602b      	str	r3, [r5, #0]
 8001148:	f7ff fa95 	bl	8000676 <_close>
 800114c:	1c43      	adds	r3, r0, #1
 800114e:	d102      	bne.n	8001156 <_close_r+0x1a>
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	b103      	cbz	r3, 8001156 <_close_r+0x1a>
 8001154:	6023      	str	r3, [r4, #0]
 8001156:	bd38      	pop	{r3, r4, r5, pc}
 8001158:	200000e8 	.word	0x200000e8

0800115c <_fstat_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4d07      	ldr	r5, [pc, #28]	; (800117c <_fstat_r+0x20>)
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	4608      	mov	r0, r1
 8001166:	4611      	mov	r1, r2
 8001168:	602b      	str	r3, [r5, #0]
 800116a:	f7ff fa90 	bl	800068e <_fstat>
 800116e:	1c43      	adds	r3, r0, #1
 8001170:	d102      	bne.n	8001178 <_fstat_r+0x1c>
 8001172:	682b      	ldr	r3, [r5, #0]
 8001174:	b103      	cbz	r3, 8001178 <_fstat_r+0x1c>
 8001176:	6023      	str	r3, [r4, #0]
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop
 800117c:	200000e8 	.word	0x200000e8

08001180 <_isatty_r>:
 8001180:	b538      	push	{r3, r4, r5, lr}
 8001182:	4d06      	ldr	r5, [pc, #24]	; (800119c <_isatty_r+0x1c>)
 8001184:	2300      	movs	r3, #0
 8001186:	4604      	mov	r4, r0
 8001188:	4608      	mov	r0, r1
 800118a:	602b      	str	r3, [r5, #0]
 800118c:	f7ff fa8f 	bl	80006ae <_isatty>
 8001190:	1c43      	adds	r3, r0, #1
 8001192:	d102      	bne.n	800119a <_isatty_r+0x1a>
 8001194:	682b      	ldr	r3, [r5, #0]
 8001196:	b103      	cbz	r3, 800119a <_isatty_r+0x1a>
 8001198:	6023      	str	r3, [r4, #0]
 800119a:	bd38      	pop	{r3, r4, r5, pc}
 800119c:	200000e8 	.word	0x200000e8

080011a0 <_lseek_r>:
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4d07      	ldr	r5, [pc, #28]	; (80011c0 <_lseek_r+0x20>)
 80011a4:	4604      	mov	r4, r0
 80011a6:	4608      	mov	r0, r1
 80011a8:	4611      	mov	r1, r2
 80011aa:	2200      	movs	r2, #0
 80011ac:	602a      	str	r2, [r5, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	f7ff fa88 	bl	80006c4 <_lseek>
 80011b4:	1c43      	adds	r3, r0, #1
 80011b6:	d102      	bne.n	80011be <_lseek_r+0x1e>
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	b103      	cbz	r3, 80011be <_lseek_r+0x1e>
 80011bc:	6023      	str	r3, [r4, #0]
 80011be:	bd38      	pop	{r3, r4, r5, pc}
 80011c0:	200000e8 	.word	0x200000e8

080011c4 <__malloc_lock>:
 80011c4:	4801      	ldr	r0, [pc, #4]	; (80011cc <__malloc_lock+0x8>)
 80011c6:	f7ff be0b 	b.w	8000de0 <__retarget_lock_acquire_recursive>
 80011ca:	bf00      	nop
 80011cc:	200000dc 	.word	0x200000dc

080011d0 <__malloc_unlock>:
 80011d0:	4801      	ldr	r0, [pc, #4]	; (80011d8 <__malloc_unlock+0x8>)
 80011d2:	f7ff be06 	b.w	8000de2 <__retarget_lock_release_recursive>
 80011d6:	bf00      	nop
 80011d8:	200000dc 	.word	0x200000dc

080011dc <_read_r>:
 80011dc:	b538      	push	{r3, r4, r5, lr}
 80011de:	4d07      	ldr	r5, [pc, #28]	; (80011fc <_read_r+0x20>)
 80011e0:	4604      	mov	r4, r0
 80011e2:	4608      	mov	r0, r1
 80011e4:	4611      	mov	r1, r2
 80011e6:	2200      	movs	r2, #0
 80011e8:	602a      	str	r2, [r5, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	f7ff fa0a 	bl	8000604 <_read>
 80011f0:	1c43      	adds	r3, r0, #1
 80011f2:	d102      	bne.n	80011fa <_read_r+0x1e>
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	b103      	cbz	r3, 80011fa <_read_r+0x1e>
 80011f8:	6023      	str	r3, [r4, #0]
 80011fa:	bd38      	pop	{r3, r4, r5, pc}
 80011fc:	200000e8 	.word	0x200000e8

08001200 <_init>:
 8001200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001202:	bf00      	nop
 8001204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001206:	bc08      	pop	{r3}
 8001208:	469e      	mov	lr, r3
 800120a:	4770      	bx	lr

0800120c <_fini>:
 800120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800120e:	bf00      	nop
 8001210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001212:	bc08      	pop	{r3}
 8001214:	469e      	mov	lr, r3
 8001216:	4770      	bx	lr
